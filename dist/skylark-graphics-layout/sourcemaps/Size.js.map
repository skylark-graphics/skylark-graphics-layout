{"version":3,"sources":["Size.js"],"names":["define","langx","MeasureValue","layout","Size","klass","klassName","width","get","this","_","set","v","parse","height","clone","toArray","toPlain","toStrng","toString","_construct","fromString","s","a","split","i","length","undefined","fromArray","fromPlain","o","w","h","fromCss","css","toCss","size","auto"],"mappings":";;;;;;;AAAAA,QACI,sBACH,sCACG,YACF,SAASC,EAAOC,EAAaC,GAE3B,IAAIC,EAAOH,EAAMI,OACbC,UAAa,OAGnBC,OACCC,IAAM,WACL,OAAOC,KAAKC,EAAEH,OAENI,IAAM,SAASC,GACXH,KAAKC,EAAEH,MAAQL,EAAaW,MAAMD,KAKhDE,QACCN,IAAM,WACL,OAAOC,KAAKC,EAAEI,QAENH,IAAM,SAASC,GACXH,KAAKC,EAAEI,OAASZ,EAAaW,MAAMD,KAIjDG,MAAU,WACT,OAAO,IAAIX,EAAKK,KAAKF,MAAME,KAAKK,SAG3BE,QAAY,WACR,OAAQP,KAAKF,MAAME,KAAKK,SAG5BG,QAAY,WACR,OACIV,MAAWE,KAAKF,MAAMW,UACtBJ,OAAYL,KAAKK,OAAOK,aAIhCA,SAAY,WACX,OAAOV,KAAKF,MAAMY,WAAY,IAAMV,KAAKK,OAAOK,YAGjDC,WAAc,SAASb,EAAOO,GAC1BL,KAAKC,GACDH,MAASL,EAAaW,MAAMN,GAC5BO,OAAUZ,EAAaW,MAAMC,OA2D5C,OAtDAV,EAAKiB,WAAa,SAASC,GAEpB,IADN,IAAIC,EAAID,EAAEE,MAAM,KACDC,EAAI,EAAGA,EAAEF,EAAEG,OAAOD,IACZ,QAAPF,EAAEE,GACFF,EAAEE,GAAK,KACQ,aAARF,EAAEE,KACTF,EAAEE,QAAKE,GAGf,OAAOvB,EAAKwB,UAAUL,IAG7BnB,EAAKyB,UAAY,SAASC,GACnB,IAAIvB,EAAQuB,EAAEvB,OAASuB,EAAEC,EACrBjB,EAASgB,EAAEhB,QAAUgB,EAAEE,EAIjC,OAAO,IAAI5B,EAAKG,EAAMO,IAGvBV,EAAKwB,UAAY,SAASL,GACzB,OAAO,IAAInB,EAAKmB,EAAE,GAAGA,EAAEG,OAAO,EAAEH,EAAE,GAAGA,EAAE,KAGrCnB,EAAK6B,QAAU,SAASC,GACpB,OAAO9B,EAAKyB,UAAUK,IAG1B9B,EAAK+B,MAAQ,SAASC,EAAKF,GAIvB,GAHKA,IACDA,MAEAE,EAAM,CACN,IAAI7B,EAAQ6B,EAAK7B,MACbO,EAASsB,EAAKtB,OAEdP,IACA2B,EAAI3B,MAAQA,EAAMY,YAElBL,IACAoB,EAAIpB,OAASA,EAAOK,YAI5B,OAAOe,GAGX9B,EAAKiC,KAAO,IAAIjC,EACZF,EAAamC,KACbnC,EAAamC,MAIZlC,EAAOC,KAAOA","file":"../Size.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n\t\"skylark-langx-measures/MeasureValue\",\r\n    \"./layout\"\r\n],function(langx, MeasureValue,layout) {\r\n\r\n    var Size = langx.klass({\r\n        \"klassName\": \"Size\",\r\n\t\t// width: Number\r\n\t\t//\t\tThe width of the default rectangle, value 100.\r\n\t\t\"width\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.width;\r\n\t\t\t},\r\n            set : function(v) {\r\n                this._.width = MeasureValue.parse(v);\r\n            }\r\n\t\t},\r\n\t\t// height: Number\r\n\t\t//\t\tThe height of the default rectangle, value 100.\r\n\t\t\"height\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.height;\r\n\t\t\t},\r\n            set : function(v) {\r\n                this._.height = MeasureValue.parse(v);\r\n            }\r\n\t\t},\r\n\r\n\t\t\"clone\"\t: function(){\r\n\t\t\treturn new Size(this.width,this.height);\r\n\t\t},\r\n\r\n        \"toArray\" : function() {\r\n            return [this.width,this.height];\r\n        },\r\n\r\n        \"toPlain\" : function() {\r\n            return {\r\n                \"width\"  : this.width.toStrng(),\r\n                \"height\"  : this.height.toString()\r\n            };\r\n        },\r\n\r\n        \"toString\": function() {\r\n        \treturn this.width.toString() +\" \" + this.height.toString();\r\n        },\r\n\r\n        \"_construct\" :function(width, height) {\r\n            this._ = {\r\n                \"width\": MeasureValue.parse(width),\r\n                \"height\": MeasureValue.parse(height)\r\n            };\r\n        }\r\n\t});\r\n\r\n\tSize.fromString = function(s) {\r\n\t\tvar a = s.split(\" \");\r\n        for (var i = 0; i<a.length;i++) {\r\n            if (a[i]== \"null\") {\r\n                a[i] = null;\r\n            } else if (a[i] == \"undefined\") {\r\n                a[i] = undefined;\r\n            }\r\n        }\r\n        return Size.fromArray(a);\r\n\t};\r\n\r\n\tSize.fromPlain = function(o) {\r\n        var width = o.width || o.w,\r\n            height = o.height || o.h;\r\n//        width = width ? width : MeasureValue.auto;\r\n//        height = height ? height : MeasureValue.auto;\r\n\r\n\t\treturn new Size(width,height);\r\n\t};\r\n\r\n\tSize.fromArray = function(a) {\r\n\t\treturn new Size(a[0],a.length>1?a[1]:a[0]);\r\n\t};\r\n\r\n    Size.fromCss = function(css) {\r\n        return Size.fromPlain(css);\r\n    };\r\n\r\n    Size.toCss = function(size,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (size) {\r\n            var width = size.width,\r\n                height = size.height;\r\n\r\n            if (width) {\r\n                css.width = width.toString();\r\n            }\r\n            if (height) {\r\n                css.height = height.toString();\r\n            }\r\n        }\r\n\r\n        return css;\r\n    };    \r\n\r\n    Size.auto = new Size(\r\n        MeasureValue.auto,\r\n        MeasureValue.auto\r\n    );\r\n\r\n\t\r\n\treturn  layout.Size = Size;\r\n\t\r\n});\t\r\n"]}