{"version":3,"sources":["skylark-graphics-layout.js"],"names":["define","skylark","langx","attach","log2","x","n","i","layout","AnchorStyle","mixin","none","left","top","right","bottom","Vector2","Location","inherit","klassName","get","this","set","v","y","clone","toArray","toPlain","toString","toCss","css","fromString","s","a","split","fromArray","fromPlain","o","l","t","length","undefined","fromCss","Point","loc","MeasureValue","Size","width","_","height","init","w","h","size","auto","Zero","Bounds","klass","bounds","box","radius","leftTop","leftBottom","rightTop","rightBottom","move","dx","dy","containPoint","p","isEmpty","notEqual","r","equal","isIntersect","x2","y2","width2","height2","x1","y1","width1","height1","Math","min","intersect","unite","max","parseFloat","Direction","leftRight","rightLeft","topDown","bottomUp","DisplayMode","inline","block","listtem","inlineblock","tableRowGroup","tablecell","tablerow","mode","FloatMode","Flow","display","float","position","_construct","params","flow","repeat","HorzAlign","center","stretch","_WIDTHS_R","Margin","getAll","setAll","Padding","equale","target","b","Object","match","len","marginTop","marginRight","marginLeft","marginBottom","margin","paddingTop","paddingRight","paddingLeft","paddingBottom","padding","PositionMode","absolute","fixed","relative","static","Restriction","maxHeight","maxWidth","minHeight","minWidth","_consturct","restriction","type","MeasureType","Alignment","main"],"mappings":"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","file":"../skylark-graphics-layout.js","sourcesContent":["define('skylark-graphics-layout/layout',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n], function(skylark, langx) {\r\n\t\r\n\tvar layout =  {\r\n\r\n\t  log2 : function (x) {\r\n\t    var n = 1, i = 0;\r\n\t    while (x > n) {\r\n\t      n <<= 1;\r\n\t      i++;\r\n\t    }\r\n\t    return i;\r\n\t  }\r\n\r\n\t};\r\n\r\n\r\n\treturn skylark.attach(\"graphics.layout\",layout);\r\n});\ndefine('skylark-graphics-layout/AnchorStyle',[\r\n    \"skylark-langx/langx\",\r\n    \"./layout\"\r\n],function(langx,layout) {\r\n\r\n\tvar AnchorStyle = [\"none\", \"left\", \"top\", \"right\", \"bottom\"];\r\n\t\r\n\tlangx.mixin(AnchorStyle,{\r\n\t\t\"none\" : 0, \r\n\t\t\"left\" : 1, \r\n\t\t\"top\" : 2, \r\n\t\t\"right\" : 3, \r\n\t\t\"bottom\" : 4\r\n\t});\r\n\r\n\treturn layout.AnchorStyle = AnchorStyle;\r\n\r\n});\r\n\ndefine('skylark-graphics-layout/Location',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-langx-numerics/Vector2\",    \r\n    \"./layout\"\r\n],function(langx, Vector2,layout) {\r\n\r\n    var Location =  Vector2.inherit({\r\n\r\n        \"klassName\": \"Location\",\r\n\r\n        \"left\": {\r\n            get : function() {\r\n                return this.x;\r\n            },\r\n\r\n            set : function(v) {\r\n                this.x = v;\r\n            }\r\n\r\n        },\r\n\r\n        \"top\": {\r\n            get : function() {\r\n                return this.y;\r\n            },\r\n\r\n            set : function(v) {\r\n                this.y = v;\r\n            }\r\n\r\n        },\r\n\r\n        \"clone\" : function(){\r\n            return new Location(this.left,this.top);\r\n        },\r\n\r\n        \"toArray\" : function() {\r\n            return [this.left,this.top];\r\n        },\r\n\r\n        \"toPlain\" : function() {\r\n            return {\r\n                \"left\"  : this.left,\r\n                \"top\"  : this.top\r\n            };\r\n        },\r\n        \"toString\": function() {\r\n            return this.left +\",\" + this.top;\r\n        },\r\n\r\n        toCss: function(css) {\r\n            return Location.toCss(this, css);\r\n        }\r\n\r\n    });\r\n\r\n    Location.fromString = function(s) {\r\n        var a = s.split(\",\");\r\n        return Location.fromArray(a);\r\n    };\r\n\r\n    Location.fromPlain = function(o) {\r\n        var x = o.x || o.l || o.left,\r\n            y = o.y || o.t || o.top;\r\n//        x = x ? x : MeasureValue.auto;\r\n//        y = y ? y : MeasureValue.auto;\r\n        return new Location(x, y);\r\n    };\r\n\r\n    Location.fromArray = function(a) {\r\n        return new Location(a[0], a.length > 1 ? a[1] : undefined);\r\n    };\r\n\r\n    Location.fromCss = function(css) {\r\n        return Point.fromPlain({\r\n            x: css.left,\r\n            y: css.top\r\n        });\r\n    };\r\n    \r\n    Location.toCss = function(loc, css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        css.left = loc.x && loc.x.toString();\r\n        css.top = loc.y && loc.y.toString();\r\n\r\n        return css;\r\n    };\r\n    return layout.Location = Location;\r\n\r\n});\r\n\ndefine('skylark-graphics-layout/Size',[\r\n    \"skylark-langx/langx\",\r\n\t\"skylark-langx-numerics/Vector2\",   \r\n\t\"skylark-langx-measures/MeasureValue\",\r\n    \"./layout\"\r\n],function(langx, Vector2,MeasureValue,layout) {\r\n\r\n    var Size = Vector2.inherit({\r\n        \"klassName\": \"Size\",\r\n\t\t// width: Number\r\n\t\t//\t\tThe width of the default rectangle, value 100.\r\n\t\t\"width\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.width;\r\n\t\t\t}\r\n\t\t},\r\n\t\t// height: Number\r\n\t\t//\t\tThe height of the default rectangle, value 100.\r\n\t\t\"height\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.height;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"clone\"\t: function(){\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Size(_.width,_.height);\r\n\t\t},\r\n\r\n        \"toArray\" : function() {\r\n            return [this.width,this.height];\r\n        },\r\n\r\n        \"toPlain\" : function() {\r\n            return {\r\n                \"width\"  : this.width,\r\n                \"height\"  : this.height\r\n            };\r\n        },\r\n        \"toString\": function() {\r\n        \treturn this.width +\",\" + this.height;\r\n        },\r\n\r\n        \"init\" : function(width,height) {\r\n        \tvar _ = this._ = {};\r\n        \t_.width = width || 0;\r\n        \t_.height = height || 0;\r\n        }\r\n\t});\r\n\r\n\tSize.fromString = function(s) {\r\n\t\tvar a = s.split(\" \");\r\n        for (var i = 0; i<a.length;i++) {\r\n            if (a[i]== \"null\") {\r\n                a[i] = null;\r\n            } else if (a[i] == \"undefined\") {\r\n                a[i] = undefined;\r\n            }\r\n        }\r\n        return Size.fromArray(a);\r\n\t};\r\n\r\n\tSize.fromPlain = function(o) {\r\n        var width = o.width || o.w,\r\n            height = o.height || o.h;\r\n//        width = width ? width : MeasureValue.auto;\r\n//        height = height ? height : MeasureValue.auto;\r\n\r\n\t\treturn new Size(width,height);\r\n\t};\r\n\r\n\tSize.fromArray = function(a) {\r\n\t\treturn new Size(a[0],a.length>1?a[1]:a[0]);\r\n\t};\r\n\r\n    Size.fromCss = function(css) {\r\n        return Size.fromPlain(css);\r\n    };\r\n\r\n    Size.toCss = function(size,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (size) {\r\n            var width = size.width,\r\n                height = size.height;\r\n\r\n            if (width) {\r\n                css.width = width.toString();\r\n            }\r\n            if (height) {\r\n                css.height = height.toString();\r\n            }\r\n        }\r\n\r\n        return css;\r\n    };    \r\n\r\n    Size.auto = new Size(\r\n        MeasureValue.auto,\r\n        MeasureValue.auto\r\n    );\r\n\r\n/*\r\n\tSize.fromString = function(s) {\r\n\t\tvar a = s.split(\",\");\r\n\t\treturn new Size(parseFloat(a[0]),parseFloat(a[1]));\r\n\t};\r\n\r\n\tSize.fromPlain = function(o) {\r\n\t\treturn new Size(o.w || o.width,o.h || o.height);\r\n\t};\r\n\r\n\tSize.fromArray = function(a) {\r\n\t\treturn new Size(a[0],a[1]);\r\n\t};\r\n*/\r\n\r\n\tSize.Zero = new Size(0,0);\r\n\t\r\n\treturn  layout.Size = Size;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-layout/Bounds',[\r\n    \"skylark-langx/langx\",\r\n    \"./layout\",\r\n    \"./Location\",\r\n    \"./Size\"\r\n],function(langx,layout,Location,Size) {\r\n\r\n    var Bounds = langx.klass({\r\n        \"klassName\": \"Bounds\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n                var \r\n                    _ = this._,\r\n                    box = {\r\n                    x: _.x,\r\n                    y: this.y,\r\n                    width: _.width,\r\n                    height: _.height\r\n                };\r\n                return box;\r\n            }\r\n        },\r\n       \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n        // width: Number\r\n        //\t\tThe width of the default rectangle, value 100.\r\n        \"width\": {\r\n            get : function() {\r\n                return this._.width;\r\n            }\r\n        },\r\n        // height: Number\r\n        //\t\tThe height of the default rectangle, value 100.\r\n        \"height\": {\r\n            get : function() {\r\n                return this._.height;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe corner radius for the default rectangle, value 0.\r\n        \"radius\": {\r\n            get : function() {\r\n                return this._.radius;\r\n            }\r\n        },\r\n        \"leftTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Location(_.x, _.y);\r\n            }\r\n        },\r\n        \"leftBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Location(_.x, _.y + _.height);\r\n            }\r\n        },\r\n        \"rightTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Location(_.x + _.width, _.y);\r\n            }\r\n        },\r\n        \"rightBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Location(_.x + _.width, _.y + _.height);\r\n            }\r\n        },\r\n\r\n        \"size\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Size(_.width, _.height);\r\n            }\r\n        },\r\n\r\n        \"move\": function(dx, dy) {\r\n            var _ = this._;\r\n            return new Bounds(_.x + dx,_.y + dy,_.width,_.height,_.radius);\r\n        },\r\n\r\n        \"containPoint\": function(x,y) {\r\n            // support function(p)\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\r\n            return (x >= _.x) && (x < _.x + _.width) && (y >= _.y) && (y < _.y + _.height);\r\n        },\r\n\r\n\t\t\"isEmpty\"\t:\tfunction(){\r\n\t\t\treturn this.width <=0 || this.height<=0;\r\n\t\t},\r\n\t\t\r\n\t\t\"notEqual\"\t:\tfunction(/*Bounds*/r) {\r\n\t\t\treturn !r || r.x != this.x || r.y != this.y || r.width != this.width || r.height != this.height || r.radius != this.radius;\r\n\t\t},\r\n\t\t\r\n\t\t\"equal\"\t:\tfunction(/*Bounds*/r){\r\n\t\t\treturn  !this.notEqual(r);\r\n\t\t},\r\n\t\t\r\n\t\t\"isIntersect\"\t:function(/*Number*/x2,/*Number*/y2,/*Number*/width2,/*Number*/height2){\r\n\t\t\tvar x1 = this.x1,y1=this.y,width1=this.width,height1=this.height;\r\n\t\t\t \r\n\t\t    return (Math.min(x1 + width1, x2 + width2) - (x1 > x2 ? x1 : x2)) > 0 &&\r\n\t\t           (Math.min(y1 + height1, y2 + height2) - (y1 > y2 ? y1 : y2)) > 0;\r\n\t\t},\r\n\t\t\r\n\t\t\"intersect\"\t:\tfunction(/*Number*/x2,/*Number*/y2,/*Number*/width2,/*Number*/height2){\r\n\t\t\tvar x1 = this.x1,y1=this.y,width1=this.width,height1=this.height;\r\n\t\t\t \r\n\t\t    return (Math.min(x1 + width1, x2 + width2) - (x1 > x2 ? x1 : x2)) > 0 &&\r\n\t\t           (Math.min(y1 + height1, y2 + height2) - (y1 > y2 ? y1 : y2)) > 0;\r\n\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\"unite\"\t: function(/*Number*/x2,/*Number*/y2,/*Number*/width2,/*Number*/height2){\r\n\t\t\tvar x1 = this.x1,y1=this.y,width1=this.width,height1=this.height;\r\n\t\t\t \r\n\t\t\tvar x = x1 < x2 ? x1 : x2,\r\n\t\t\t\ty = y1 < y2 ? y1 : y2,\r\n\t\t\t\twidth  = Math.max(x1 + width1, x2 + width2) - x;\r\n\t\t\t\theight = Math.max(y1 + height1, y2 + height2) - y;\r\n\t\t    \r\n\t\t    return new Bounds(x,y,width,height);\r\n\t\t},\r\n\t\t\r\n\t\t\"clone\"\t: function(){\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Bounds(_.x,_.y,_.width,_.height,_.radius);\r\n\t\t},\r\n\r\n        \"init\" : function(x, y, width, height, radius) {\r\n            var _ = this._ = {};\r\n            _.x = x || 0;\r\n            _.y = y || 0;\r\n            _.width = width || 0;\r\n            _.height = height || 0;\r\n            _.radius = radius || 0;\r\n        }\r\n    });\r\n\r\n\r\n\tBounds.fromString = function(s) {\r\n\t\tvar a = s.split(\",\");\r\n\t\treturn new Bounds(parseFloat(a[0]),parseFloat(a[1]),parseFloat(a[2]),parseFloat(a[3]));\r\n\t};\r\n\r\n\tBounds.fromPlain = function(o) {\r\n\t\treturn new Bounds(o.x || o.l,o.y || o.t, o.w || o.width,o.h || o.height);\r\n\t};\r\n\r\n\tBounds.fromArray = function(a) {\r\n\t\treturn new Bounds(a[0],a[1],a[2],a[3]);\r\n\t};\r\n\t\r\n\tBounds.Zero = new Bounds(0,0,0,0);\r\n\t\r\n\r\n\treturn layout.Bounds = Bounds;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-layout/Direction',[\r\n    \"skylark-langx/langx\",\r\n    \"./layout\"\r\n],function(langx,layout) {\r\n\t\r\n\tvar Direction = [\"leftRight\",\"rightLeft\",\"topDown\",\"bottomUp\"];\r\n\r\n\tlangx.mixin(Direction,{\r\n\t\t\"leftRight\" : 0,\r\n\t\t\"rightLeft\" : 1,\r\n\t\t\"topDown\" : 2,\r\n\t\t\"bottomUp\" : 3\r\n\t});\r\n\r\n\treturn layout.Direction = Direction;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-layout/DisplayMode',[\r\n    \"skylark-langx/langx\",\r\n    \"./layout\"\r\n],function(langx,layout) {\r\n\r\n    var DisplayMode = [\"none\", \"inline\", \"block\", \"listtem\", \"inlineblock\", \"tableRowGroup\", \"tablecell\", \"tablerow\"];\r\n\r\n    langx.mixin(DisplayMode,{\r\n        \"none\" : 0, \r\n        \"inline\" : 1, \r\n        \"block\" : 2, \r\n        \"listtem\" : 3, \r\n        \"inlineblock\" :4, \r\n        \"tableRowGroup\" : 5, \r\n        \"tablecell\" : 6, \r\n        \"tablerow\" : 7\r\n    });\r\n\r\n    DisplayMode.fromCss = function(s) {\r\n        switch (s) {\r\n            case \"none\":\r\n                return DisplayMode.none;\r\n            case \"inline\":\r\n                return DisplayMode.inline;\r\n            case \"block\":\r\n                return DisplayMode.block;\r\n            case \"list-item\":\r\n                return DisplayMode.listtem;\r\n            case \"inline-block\":\r\n                return DisplayMode.inlineblock;\r\n            case \"table-cell\":\r\n                return DisplayMode.tablecell;\r\n            case \"table-row\":\r\n                return DisplayMode.tablerow;\r\n            case \"table-row-group\":\r\n                return DisplayMode.tableRowGroup\r\n            default:\r\n                return undefined;\r\n        }\r\n    };\r\n    \r\n    DisplayMode.toCss = function(mode) {\r\n        switch (mode) {\r\n            case DisplayMode.none:\r\n                return \"none\";\r\n            case DisplayMode.inline:\r\n                return \"inline\";\r\n            case DisplayMode.block:\r\n                return \"block\";\r\n            case DisplayMode.listtem:\r\n                return \"list-item\";\r\n            case DisplayMode.inlineblock:\r\n                return \"inline-block\";\r\n            case DisplayMode.tablecell:\r\n                return \"table-cell\";\r\n            case DisplayMode.tablerow:\r\n                return \"table-row\";\r\n            case DisplayMode.tableRowGroup:\r\n                return \"table-row-group\";\r\n            default:\r\n                return undefined;\r\n        }\r\n    };\r\n\r\n    return layout.DisplayMode = DisplayMode;\r\n\r\n});\r\n\ndefine('skylark-graphics-layout/FloatMode',[\r\n\t\"skylark-langx/langx\",\r\n\t\"./layout\"\r\n],function(langx,layout) {\r\n\r\n\tvar FloatMode = [\"none\", \"left\", \"right\"];\r\n\r\n\tlangx.mixin(FloatMode,{\r\n\t\t\"none\" : 0, \r\n\t\t\"left\" : 1, \r\n\t\t\"right\" : 2\r\n\t});\r\n\r\n\r\n\treturn layout.FloatMode = FloatMode;\r\n});\r\n\ndefine('skylark-graphics-layout/Flow',[\r\n\t\"skylark-langx/langx\",\r\n\t\"./layout\"\r\n],function(langx,layout) {\r\n\r\n\tvar Flow = langx.klass({\r\n\t\t\r\n\t\t\"klassName\"\t:\t\"Flow\",\r\n\r\n\t\t\"display\"\t:\t{\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.display;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"float\"\t:\t{\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.float;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"position\"\t:\t{\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.position;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttoCss : function(css) {\r\n\t\t\treturn Flow.toCss(this,css);\r\n\t\t},\r\n\t\t\r\n\t\t\"_construct\" : function(params){\r\n\t\t\tthis._ = {\r\n\t\t\t\tdisplay   : params.display,\r\n\t\t\t\tfloat \t  : params.float,\r\n\t\t\t\tposition  : params.position\r\n\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\tFlow.fromPlain = function(o) {\r\n\t\treturn new Flow({\r\n\t\t\tdisplay  : o.display,\r\n\t\t\tfloat    : o.float,\r\n\t\t\tposition : o.position\r\n\t\t});\r\n\t};\r\n\r\n\tFlow.fromCss = Flow.fromPlain;\r\n\r\n\tFlow.toCss = function(flow,css) {\r\n        if (!css) {\r\n        \tcss = {};\r\n        }\r\n    \tif (flow.display) {\r\n        \tcss.display = DisplayMode.toCss(flow.display);\r\n    \t}\r\n    \tif (flow.repeat) {\r\n        \tcss.float = flow.float.toString();\r\n    \t}\r\n    \tif (flow.position) {\r\n        \tcss.position = flow.position.toString();\r\n    \t}\r\n\r\n        return css;\r\n\t};\r\n\r\n\treturn layout.Flow = Flow;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-layout/HorzAlign',[\r\n    \"skylark-langx/langx\",\r\n    \"./layout\"\r\n],function(langx,layout) {\r\n\r\n\t\r\n\tvar HorzAlign = [\"left\",\"center\",\"right\",\"stretch\"];\r\n\t\r\n\tlangx.mixin(HorzAlign,{\r\n\t\t\"left\" : 0,\r\n\t\t\"center\": 1 ,\r\n\t\t\"right\" : 2,\r\n\t\t\"stretch\" : 3\r\n\t});\r\n\t\r\n\r\n\treturn layout.HorzAlign = HorzAlign;\t\r\n});\t\r\n\ndefine('skylark-graphics-layout/Margin',[\r\n    \"skylark-langx/langx\",\r\n    \"./layout\"\r\n],function(langx,layout) {\r\n    var _WIDTH_R = /\\d+/,\r\n        _WIDTHS_R = /\\d*\\D*\\s*/g;\r\n\r\n    var Margin = langx.klass({\r\n\r\n        \"klassName\": \"Margin\",\r\n\r\n        \"left\": {\r\n            get : function() {\r\n                return this._.left;\r\n            }\r\n       },\r\n\r\n        \"top\": {\r\n            get : function() {\r\n                return this._.top;\r\n            }\r\n        },\r\n\r\n        \"right\": {\r\n            get : function() {\r\n                return this._.right;\r\n            }\r\n        },\r\n\r\n        \"bottom\": {\r\n            get : function() {\r\n                return this._.bottom;\r\n            }\r\n        },\r\n\r\n        getAll: function() {\r\n            if (this.left == this.bottom && this.top == this.right && this.right == this.left) {\r\n                return this.left;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        setAll: function(a) {\r\n            this._ = {\r\n                \"left\": a,\r\n                \"right\": a,\r\n                \"top\": a,\r\n                \"bottom\": a\r\n            };\r\n        },\r\n        \r\n        \"clone\" : function(){\r\n            var _ = this._;\r\n            return new Padding(_.top,_.right,_.left,_.bottom);\r\n        \r\n        },\r\n\r\n        equale: function(target) {\r\n            return this.left == target.left &&\r\n                this.top == target.top &&\r\n                this.right == target.right &&\r\n                this.bottom == target.bottom;\r\n        },\r\n\r\n        equale: function(target) {\r\n            return this.left == target.left &&\r\n                this.top == target.top &&\r\n                this.right == target.right &&\r\n                this.bottom == target.bottom;\r\n        },\r\n\r\n        toArray : function() {\r\n            return [this.top,this.right,this.left,this.bottom];\r\n        },\r\n\r\n        toPlain : function() {\r\n            return {\r\n                \"top\"  : this.top,\r\n                \"right\"  : this.right,\r\n                \"left\"  : this.left,\r\n                \"bottom\"  : this.bottom\r\n            }\r\n        },\r\n\r\n        toCss : function(css) {\r\n            return Padding.toCss(this,css);\r\n        },\r\n\r\n        \"toString\": function() {\r\n            var count = 0,\r\n                l = this.left.toString(),\r\n                t = this.top.toString(),\r\n                r = this.right.toString(),\r\n                b = this.bottom.toString();\r\n            if (r == l) {\r\n                if (t == b) {\r\n                    if (t == r) {\r\n                        return t.toString();\r\n                    } else {\r\n                        return t + \" \" + r;\r\n                    }\r\n                } else {\r\n                    return t + \" \" + r + \" \" + b;\r\n                }\r\n            } else {\r\n                return t + \" \" + r + \" \" + l + \" \" + b;\r\n            }\r\n\r\n        },\r\n        \r\n        \"_construct\"    :   function(/*Number*/t, /*Number*/r, /*Number*/l, /*Number*/b) {\r\n            if (b === undefined) {\r\n                if (l === undefined) {\r\n                    if (r === undefined) {\r\n                        if (t === undefined) {\r\n                            //()\r\n                            b=l=r=t=0;\r\n                        } else {\r\n                            // /*Number*/a\r\n                            b=l=r=t;\r\n                        }\r\n                    } else {\r\n                        // /*Number*/tb,/*Number*/lr\r\n                        b = t;\r\n                        l = r;\r\n                    }\r\n\r\n                } else {\r\n                    // /*Number*/t,/*Number*/lr,/*Number*/b \r\n                    b = l;\r\n                    l = r;\r\n                } \r\n            }\r\n            this._ = {\r\n                \"left\": l,\r\n                \"right\": r,\r\n                \"top\": t,\r\n                \"bottom\": b\r\n            };\r\n        }\r\n    });\r\n\r\n    Object.mixin(Margin, {\r\n        \"fromArray\" : function(a) {\r\n            switch (a.length) {\r\n                case 1 : return new Margin(a[0],a[0],a[0],a[0]);\r\n                case 2 : return new Margin(a[0],a[1],a[1],a[0]);\r\n                case 3 : return new Margin(a[0],a[1],a[1],a[0]);\r\n                case 4 : return new Margin(a[0],a[1],a[1],a[0]);\r\n                default : return;\r\n            }\r\n        },\r\n        \"fromPlain\" : function(o) {\r\n            return new Margin(o.t,o.r,o.l,o.b);\r\n        },\r\n        \"fromString\": function(s) {\r\n           var a = s.match(_WIDTHS_R);\r\n            var t,\r\n                r,\r\n                l,\r\n                b,\r\n                len = a.length;\r\n            //for (var i = 0; i < len; i++) {\r\n            //    a[i] = _WIDTH_R.exec(a[i]);\r\n            //    a[i] = parseInt(a[i]);\r\n            //}\r\n            switch (len) {\r\n                case 1:\r\n                    t = r = l = b = a[0];\r\n                    break;\r\n\r\n                case 2:\r\n                    t = b = a[0];\r\n                    r = l = a[1];\r\n                    break;\r\n                case 3:\r\n                    t = a[0];\r\n                    r = l = a[1];\r\n                    b = a[2]\r\n                    break;\r\n                case 4:\r\n                    t = a[0];\r\n                    r = a[1];\r\n                    l = a[2]\r\n                    b = a[3];\r\n                    break;\r\n            }\r\n            return new Margin(t,r,l,b);\r\n        },\r\n\r\n        Zero: new Margin(0)\r\n    });\r\n\r\n    Margin.fromCss = function(css) {\r\n       return new Margin(\r\n                    css.marginTop,\r\n                    css.marginRight,\r\n                    css.marginLeft,\r\n                    css.marginBottom\r\n                );\r\n    };\r\n\r\n    Margin.toCss = function(margin,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        css.marginTop = margin.top.toString();\r\n        css.marginRight = margin.right.toString();\r\n        css.marginLeft = margin.left.toString();\r\n        css.marginBottom = margin.bottom.toString();\r\n\r\n        return css;\r\n    };\r\n\r\n\r\n    return Margin;\r\n});\r\n\ndefine('skylark-graphics-layout/Padding',[\r\n    \"skylark-langx/langx\",\r\n    \"./layout\"\r\n],function(langx,layout) {\r\n    var _WIDTH_R = /\\d+/,\r\n        _WIDTHS_R = /\\d*\\D*\\s*/g;\r\n\r\n    var Padding = langx.klass({\r\n        \"klassName\": \"Padding\",\r\n\r\n\r\n        \"left\": {\r\n            get : function() {\r\n                return this._.left;\r\n            }\r\n       },\r\n\r\n        \"top\": {\r\n            get : function() {\r\n                return this._.top;\r\n            }\r\n        },\r\n\r\n        \"right\": {\r\n            get : function() {\r\n                return this._.right;\r\n            }\r\n        },\r\n\r\n        \"bottom\": {\r\n            get : function() {\r\n                return this._.bottom;\r\n            }\r\n        },\r\n\r\n        getAll: function() {\r\n            if (this.left == this.bottom && this.top == this.right && this.right == this.left) {\r\n                return this.left;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        setAll: function(a) {\r\n            this._ = {\r\n                \"left\": a,\r\n                \"right\": a,\r\n                \"top\": a,\r\n                \"bottom\": a\r\n            };\r\n        },\r\n        \r\n        \"clone\" : function(){\r\n            var _ = this._;\r\n            return new Padding(_.top,_.right,_.left,_.bottom);\r\n        \r\n        },\r\n\r\n        equale: function(target) {\r\n            return this.left == target.left &&\r\n                this.top == target.top &&\r\n                this.right == target.right &&\r\n                this.bottom == target.bottom;\r\n        },\r\n\r\n        equale: function(target) {\r\n            return this.left == target.left &&\r\n                this.top == target.top &&\r\n                this.right == target.right &&\r\n                this.bottom == target.bottom;\r\n        },\r\n\r\n        toArray : function() {\r\n            return [this.top,this.right,this.left,this.bottom];\r\n        },\r\n\r\n        toPlain : function() {\r\n            return {\r\n                \"top\"  : this.top,\r\n                \"right\"  : this.right,\r\n                \"left\"  : this.left,\r\n                \"bottom\"  : this.bottom\r\n            }\r\n        },\r\n\r\n        toCss : function(css) {\r\n            return Padding.toCss(this,css);\r\n        },\r\n\r\n        \"toString\": function() {\r\n            var count = 0,\r\n                l = this.left.toString(),\r\n                t = this.top.toString(),\r\n                r = this.right.toString(),\r\n                b = this.bottom.toString();\r\n            if (r == l) {\r\n                if (t == b) {\r\n                    if (t == r) {\r\n                        return t.toString();\r\n                    } else {\r\n                        return t + \" \" + r;\r\n                    }\r\n                } else {\r\n                    return t + \" \" + r + \" \" + b;\r\n                }\r\n            } else {\r\n                return t + \" \" + r + \" \" + l + \" \" + b;\r\n            }\r\n\r\n        },\r\n\r\n        \"_construct\"    :   function(/*Number*/t, /*Number*/r, /*Number*/l, /*Number*/b) {\r\n            if (b === undefined) {\r\n                if (l === undefined) {\r\n                    if (r === undefined) {\r\n                        if (t === undefined) {\r\n                            //()\r\n                            b=l=r=t=0;\r\n                        } else {\r\n                            // /*Number*/a\r\n                            b=l=r=t;\r\n                        }\r\n                    } else {\r\n                        // /*Number*/tb,/*Number*/lr\r\n                        b = t;\r\n                        l = r;\r\n                    }\r\n\r\n                } else {\r\n                    // /*Number*/t,/*Number*/lr,/*Number*/b \r\n                    b = l;\r\n                    l = r;\r\n                } \r\n            }\r\n            this._ = {\r\n                \"left\": l,\r\n                \"right\": r,\r\n                \"top\": t,\r\n                \"bottom\": b\r\n            };\r\n        }\r\n    });\r\n\r\n    langx.mixin(Padding, {\r\n        \"fromArray\" : function(a) {\r\n            switch (a.length) {\r\n                case 1 : return new Padding(a[0],a[0],a[0],a[0]);\r\n                case 2 : return new Padding(a[0],a[1],a[1],a[0]);\r\n                case 3 : return new Padding(a[0],a[1],a[1],a[0]);\r\n                case 4 : return new Padding(a[0],a[1],a[1],a[0]);\r\n                default : return;\r\n            }\r\n        },\r\n        \"fromPlain\" : function(o) {\r\n            return new Padding(o.t,o.r,o.l,o.b);\r\n        },\r\n        \"fromString\": function(s) {\r\n           var a = s.match(_WIDTHS_R);\r\n            var t,\r\n                r,\r\n                l,\r\n                b,\r\n                len = a.length;\r\n            //for (var i = 0; i < len; i++) {\r\n            //    a[i] = _WIDTH_R.exec(a[i]);\r\n            //    a[i] = parseInt(a[i]);\r\n            //}\r\n            switch (len) {\r\n                case 1:\r\n                    t = r = l = b = a[0];\r\n                    break;\r\n\r\n                case 2:\r\n                    t = b = a[0];\r\n                    r = l = a[1];\r\n                    break;\r\n                case 3:\r\n                    t = a[0];\r\n                    r = l = a[1];\r\n                    b = a[2]\r\n                    break;\r\n                case 4:\r\n                    t = a[0];\r\n                    r = a[1];\r\n                    l = a[2]\r\n                    b = a[3];\r\n                    break;\r\n            }\r\n            return new Padding(t,r,l,b);\r\n        },\r\n\r\n        Zero: new Padding(0)\r\n    });\r\n\r\n    Padding.fromCss = function(css) {\r\n       return new Padding(\r\n                    css.paddingTop,\r\n                    css.paddingRight,\r\n                    css.paddingLeft,\r\n                    css.paddingBottom\r\n                );\r\n    };\r\n\r\n    Padding.toCss = function(padding,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (padding) {\r\n            css.paddingTop = padding.top.toString();\r\n            css.paddingRight = padding.right.toString();\r\n            css.paddingLeft = padding.left.toString();\r\n            css.paddingBottom = padding.bottom.toString();\r\n        }\r\n\r\n        return css;\r\n    };\r\n\r\n    return Padding;\r\n});\r\n\ndefine('skylark-graphics-layout/PositionMode',[\r\n\t\"skylark-langx/langx\",\r\n\t\"./layout\"\r\n],function(langx,layout) {\r\n\r\n    var PositionMode = [\"absolute\", \"fixed\", \"relative\", \"static\"];\r\n\r\n    langx.mixin(PositionMode,{\r\n    \t\"absolute\" : 0, \r\n    \t\"fixed\" : 1, \r\n    \t\"relative\" : 2, \r\n    \t\"static\" : 3\r\n    });\r\n\r\n    return layout.PositionMode = PositionMode;\r\n});\r\n\ndefine('skylark-graphics-layout/Restriction',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-langx-measures/MeasureValue\",\r\n    \"./layout\"\r\n],function(langx,MeasureValue,layout) {\r\n\r\n    var Restriction = langx.klass({\r\n        \"klassName\": \"Restriction\",\r\n\r\n\r\n        \"maxHeight\": {\r\n            get : function() {\r\n                return this._.maxHeight;\r\n            }\r\n        },\r\n        \"maxWidth\": {\r\n            get : function() {\r\n                return this._.maxWidth;\r\n            }\r\n        },\r\n        \"minHeight\": {\r\n            get : function() {\r\n                return this._.minHeight;\r\n            }\r\n        },\r\n        \"minWidth\": {\r\n            get : function() {\r\n                return this._.minWidth;\r\n            }\r\n        },\r\n\r\n        toCss : function(css) {\r\n            return Restriction.toCss(this,css);\r\n        },\r\n       toString: function(){\r\n            var minWidth  = this.minWidth,\r\n                minHeight = this.minHeight,\r\n                maxWidth = this.maxWidth,\r\n                maxHeight = this.maxHeight;\r\n               \r\n            return minWidth.toString() + \" \" + \r\n                   minHeight.toString() + \" \" +\r\n                   maxWidth.toString() + \" \" + \r\n                   maxHeight.toString();\r\n        },\r\n        \"_consturct\" :   function(minWidth, minHeight,maxWidth, maxHeight) {\r\n            this._ = {\r\n                \"minWidth\": minWidth,\r\n                \"minHeight\": minHeight,\r\n                \"maxWidth\": maxWidth,\r\n                \"maxHeight\": maxHeight\r\n            };\r\n        }\r\n\r\n    });\r\n\r\n    Restriction.fromString = function(s) {\r\n        var a = s.split(\" \");\r\n        return Restriction.fromArray(a);\r\n    };\r\n\r\n    Restriction.fromPlain = function(o) {\r\n        var minWidth = o.minWidth,\r\n            minHeight = o.minHeight,\r\n            maxWidth = o.maxWidth,\r\n            maxHeight = o.maxHeight;\r\n        minWidth = minWidth ? minWidth : MeasureValue.none;\r\n        minHeight = minHeight ? minHeight : MeasureValue.none;\r\n        maxWidth = maxWidth ? maxWidth : MeasureValue.none;\r\n        maxHeight = maxHeight ? maxHeight : MeasureValue.none;\r\n\r\n        return new Restriction(minWidth, minHeight,maxWidth, maxHeight);\r\n    };\r\n\r\n    Restriction.fromArray = function(a) {\r\n        return new Restriction(a.length>0?a[0]:MeasureValue.none,\r\n                               a.length>1?a[1]:MeasureValue.none,\r\n                               a.length>2?a[2]:MeasureValue.none,\r\n                               a.length>3?a[3]:MeasureValue.none\r\n                    );\r\n    };\r\n\r\n    Restriction.fromCss = function(css) {\r\n        return Restriction.fromPlain(css);\r\n    };\r\n    Restriction.toCss = function(restriction,css) {\r\n        if (!css) {\r\n            css = {};\r\n        }\r\n        if (restriction) {\r\n            var maxWidth = restriction.maxWidth,\r\n                maxHeight = restriction.maxHeight,\r\n                minWidth = restriction.minWidth,\r\n                minHeight = restriction.minHeight;\r\n\r\n            if (maxWidth) {\r\n                css.maxWidth = maxWidth.type === MeasureType.none ? \"\" : maxWidth.toString();\r\n            }\r\n            if (maxHeight) {\r\n                css.maxHeight = maxHeight.type === MeasureType.none ? \"\" :maxHeight.toString();\r\n            }\r\n\r\n            if (minWidth) {\r\n                css.minWidth = minWidth.type === MeasureType.none ? \"\" :minWidth.toString();\r\n            }\r\n            if (minHeight) {\r\n                css.minHeight = minHeight.type === MeasureType.none ? \"\" :minHeight.toString();\r\n            }\r\n        }\r\n\r\n        return css;\r\n    };    \r\n\r\n    Restriction.none = new Restriction(\r\n        MeasureValue.none,\r\n        MeasureValue.none,\r\n        MeasureValue.none,\r\n        MeasureValue.none\r\n    );\r\n    return Restriction;\r\n    \r\n}); \r\n\ndefine('skylark-graphics-layout/VertAlign',[\r\n    \"skylark-langx/langx\",\r\n    \"./layout\"\r\n],function(langx,layout) {\r\n\r\n\tvar VertAlign = [\"top\",\"center\",\"bottom\",\"stretch\"];\r\n\t\r\n\tlangx.mixin(VertAlign,{\r\n\t\t\"top\" : 0,\r\n\t\t\"center\" : 1,\r\n\t\t\"bottom\" : 2,\r\n\t\t\"stretch\" : 3\r\n\t});\r\n\r\n\treturn Alignment;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-layout/main',[\r\n    \"./layout\",\r\n    \"./AnchorStyle\",\r\n    \"./Bounds\",\r\n    \"./Direction\",\r\n    \"./DisplayMode\",\r\n    \"./FloatMode\",\r\n    \"./Flow\",\r\n    \"./HorzAlign\",\r\n    \"./Location\",\r\n    \"./Margin\",\r\n    \"./Padding\",\r\n    \"./PositionMode\",\r\n    \"./Restriction\",\r\n    \"./Size\",\r\n    \"./VertAlign\"\r\n], function(layout) {\r\n\r\n\treturn layout;\r\n});\ndefine('skylark-graphics-layout', ['skylark-graphics-layout/main'], function (main) { return main; });\n\n"]}